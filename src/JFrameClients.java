/*
 * To change this template, choose Tools * Templates
 * and open the template in the editor.
 */


import Métier.Client;
import dao.BddDAO;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.Arrays;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.YES_NO_OPTION;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.ImageIcon;

/**
 *
 * @author btssio
 */
public class JFrameClients extends javax.swing.JFrame {

    DefaultTableModel model = new DefaultTableModel(); 
    boolean modif=false;
    
    /**
     * Creates new form JFrameDemoModeleList
     */
    public JFrameClients() {
        initComponents();
        this.pack();
        this.setLocationRelativeTo(null);
        this.setVisible(true);
        String[] colums = {"Libelle","Correspondant","Tel","Fax","Mail","adresse"};
        model.setColumnIdentifiers(colums);     
        this.tabClient.setModel(model);
        tabClient.getColumnModel().getColumn(0).setPreferredWidth(150);
        tabClient.getColumnModel().getColumn(1).setPreferredWidth(150);
        tabClient.getColumnModel().getColumn(2).setPreferredWidth(110);
        tabClient.getColumnModel().getColumn(3).setPreferredWidth(110);
        tabClient.getColumnModel().getColumn(4).setPreferredWidth(200);
        tabClient.getColumnModel().getColumn(5).setPreferredWidth(250);
        try{
            String clientsString = BddDAO.importClientsFromText();
            String[] clientsString2 = clientsString.split("//");
            Arrays.sort(clientsString2);
            for(int i=0;i<clientsString2.length;i++){
                String[] clientString = clientsString2[i].split(";");
                String libelle="";
                String correspondant="";
                String tel="";
                String fax="";
                String mail="";
                String adresse="";
                try{
                    libelle=clientString[0];
                    correspondant=clientString[1];
                    tel=clientString[2];
                    fax=clientString[3];
                    mail=clientString[4];
                    adresse=clientString[5];
                }catch(Exception e){
                    
                }
                Client unClient = new Client(libelle, correspondant, tel, fax, mail, adresse);
                model.addRow(new Object[]{unClient.getLibelle(),unClient.getCorrespondant(),unClient.getTel(),unClient.getFax(),unClient.getMail(),unClient.getAdresse()});
            }
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, "Un problème est survenu au chargement de la BDD", "Erreur", JOptionPane.ERROR_MESSAGE);
        }
    }

    public static JTable getjTable2() {
        return tabClient;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField6 = new javax.swing.JTextField();
        jTextField9 = new javax.swing.JTextField();
        jTextField11 = new javax.swing.JTextField();
        jMenu1 = new javax.swing.JMenu();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabClient = new javax.swing.JTable();
        boutonAjoutClient = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        boutonValider = new javax.swing.JButton();
        fieldRechercher = new javax.swing.JTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu2 = new javax.swing.JMenu();

        jMenu1.setText("jMenu1");

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("CLIENTS");
        setIconImage(new ImageIcon("./image/logo-sol2s.png" ).getImage());
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        tabClient.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tabClient.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        tabClient.getTableHeader().setReorderingAllowed(false);
        tabClient.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                tabClientPropertyChange(evt);
            }
        });
        tabClient.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tabClientKeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(tabClient);
        tabClient.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);

        boutonAjoutClient.setText("+");
        boutonAjoutClient.setToolTipText("Ajouter un Client");
        boutonAjoutClient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boutonAjoutClientActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel1.setText("Clients");

        boutonValider.setText("Valider");
        boutonValider.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boutonValiderActionPerformed(evt);
            }
        });

        fieldRechercher.setText("Rechercher");
        fieldRechercher.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                fieldRechercherCaretUpdate(evt);
            }
        });
        fieldRechercher.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                fieldRechercherFocusGained(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(478, 478, 478)
                .addComponent(boutonValider)
                .addGap(477, 477, 477))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(boutonAjoutClient)
                        .addGap(435, 435, 435)
                        .addComponent(jLabel1)
                        .addGap(275, 275, 275)
                        .addComponent(fieldRechercher, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(fieldRechercher, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel1))
                    .addComponent(boutonAjoutClient))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(boutonValider)
                .addContainerGap())
        );

        jMenu2.setText("Aide");
        jMenu2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu2MouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void boutonAjoutClientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boutonAjoutClientActionPerformed
        // TODO add your handling code here:
        new JFrameAjoutClient().setVisible(true);
    }//GEN-LAST:event_boutonAjoutClientActionPerformed

    private void tabClientKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tabClientKeyPressed
        // TODO add your handling code here:
        if(tabClient.getSelectedRow()!=-1){
            int keyCode = evt.getKeyCode(); 
            if (keyCode == KeyEvent.VK_DELETE) {
                int reply = JOptionPane.showConfirmDialog(null, "Etes vous sûr de vouloir supprimer cet élément ?", "", YES_NO_OPTION);
                if (reply == JOptionPane.YES_OPTION){
                    int index = tabClient.getSelectedRow();
                    DefaultTableModel model = (DefaultTableModel) tabClient.getModel();
                    Object clientSuppr = model.getValueAt(index, 0);
                    JFrameDevisGest.getjComboBox5().removeItem(clientSuppr);
                    JFrameDevisGest.getjComboBox5().setSelectedIndex(0);
                    model.removeRow(index);

                    ArrayList clients = new ArrayList();
                    for(int i=0;i<this.tabClient.getRowCount();i++){
                        String libelle = (String)this.tabClient.getValueAt(i,0);
                        String correspondant = (String)this.tabClient.getValueAt(i,1);
                        String tel = (String)this.tabClient.getValueAt(i,2);
                        String fax = (String)this.tabClient.getValueAt(i,3);
                        String mail = (String)this.tabClient.getValueAt(i,4);
                        String adresse = (String)this.tabClient.getValueAt(i,5);
                        Client unClient = new Client(libelle,correspondant,tel,fax,mail,adresse);
                        String unFournisseurString = unClient.getLibelle()+";"+unClient.getCorrespondant()+";"+unClient.getTel()+";"+unClient.getFax()+";"+unClient.getMail()+";"+unClient.getAdresse()+";//";
                        clients.add(unFournisseurString);
                    }
                    BddDAO.exportClientToText(clients);
                }
            }
        }else{
                JOptionPane.showMessageDialog(null, "Veuillez sélectionner une ligne", "Erreur", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_tabClientKeyPressed

    private void tabClientPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_tabClientPropertyChange
        // TODO add your handling code here:
        modif=true;
    }//GEN-LAST:event_tabClientPropertyChange

    private void boutonValiderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boutonValiderActionPerformed
        // TODO add your handling code here:
        if(this.tabClient.getSelectedRow()!=-1){
            ArrayList clients = new ArrayList();
            for(int i=0;i<this.tabClient.getRowCount();i++){
                String libelle = (String)this.tabClient.getValueAt(i,0);
                String correspondant = (String)this.tabClient.getValueAt(i,1);
                String tel = (String)this.tabClient.getValueAt(i,2);
                String fax = (String)this.tabClient.getValueAt(i,3);
                String mail = (String)this.tabClient.getValueAt(i,4);
                String adresse = (String)this.tabClient.getValueAt(i,5);
                Client unClient = new Client(libelle,correspondant,tel,fax,mail,adresse);
                String unFournisseurString = unClient.getLibelle()+";"+unClient.getCorrespondant()+";"+unClient.getTel()+";"+unClient.getFax()+";"+unClient.getMail()+";"+unClient.getAdresse()+";//";
                clients.add(unFournisseurString);
            }
            BddDAO.exportClientToText(clients);
            Object valueCell = tabClient.getValueAt(tabClient.getSelectedRow(), 0);
            JFrameDevisGest.getjComboBox5().setSelectedItem(valueCell);
        }
        JOptionPane.showMessageDialog(this, "Modifications effectuées", "Info", JOptionPane.INFORMATION_MESSAGE);
        this.dispose();
    }//GEN-LAST:event_boutonValiderActionPerformed

    private void jMenu2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu2MouseClicked
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(this, "Pour supprimer : Séletionner une ligne puis appuyer sur la touche suppr\n"
                + "Pour modifier : double clic sur une cellule du tableau\n"
                + "Pour ajouter : cliquer sur le bouton +",
                "Infos", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jMenu2MouseClicked

    private void fieldRechercherFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_fieldRechercherFocusGained
        // TODO add your handling code here:
        fieldRechercher.setText("");
    }//GEN-LAST:event_fieldRechercherFocusGained

    private void fieldRechercherCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_fieldRechercherCaretUpdate
        // TODO add your handling code here:
        int rowCount = this.tabClient.getRowCount();
        for (int i=rowCount-1 ; i>=0 ; --i) model.removeRow(i);

        try{
            String clientsString = BddDAO.importClientsFromText();
            String[] clientsString2 = clientsString.split("//");
            Arrays.sort(clientsString2);
            for(int i=0;i<clientsString2.length;i++){
                String[] clientString = clientsString2[i].split(";");
                String libelle="";
                String correspondant="";
                String tel="";
                String fax="";
                String mail="";
                String adresse="";
                try{
                    libelle=clientString[0];
                    correspondant=clientString[1];
                    tel=clientString[2];
                    fax=clientString[3];
                    mail=clientString[4];
                    adresse=clientString[5];
                }catch(Exception e){
                    
                }
                Client unClient = new Client(libelle, correspondant, tel, fax, mail, adresse);
                if(unClient.getLibelle().contains(fieldRechercher.getText()) || unClient.getLibelle().contains(fieldRechercher.getText().toUpperCase())){
                    model.addRow(new Object[]{unClient.getLibelle(),unClient.getCorrespondant(),unClient.getTel(),unClient.getFax(),unClient.getMail(),unClient.getAdresse()});
                }
            }
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, "Un problème est survenu au chargement de la BDD", "Erreur", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_fieldRechercherCaretUpdate

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        if(modif == false){
            this.dispose();
        }else{
            JOptionPane jop = new JOptionPane();			
            int option = jop.showConfirmDialog(null, "Voulez-vous enregistrer les modifications avant de quitter ?", "Enregistrer ?", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if(option == JOptionPane.OK_OPTION){
                if(this.tabClient.getSelectedRow()!=-1){
                    ArrayList clients = new ArrayList();
                    for(int i=0;i<this.tabClient.getRowCount();i++){
                        String libelle = (String)this.tabClient.getValueAt(i,0);
                        String correspondant = (String)this.tabClient.getValueAt(i,1);
                        String tel = (String)this.tabClient.getValueAt(i,2);
                        String fax = (String)this.tabClient.getValueAt(i,3);
                        String mail = (String)this.tabClient.getValueAt(i,4);
                        String adresse = (String)this.tabClient.getValueAt(i,5);
                        Client unClient = new Client(libelle,correspondant,tel,fax,mail,adresse);
                        String unFournisseurString = unClient.getLibelle()+";"+unClient.getCorrespondant()+";"+unClient.getTel()+";"+unClient.getFax()+";"+unClient.getMail()+";"+unClient.getAdresse()+";//";
                        clients.add(unFournisseurString);
                    }
                    BddDAO.exportClientToText(clients);
                    Object valueCell = tabClient.getValueAt(tabClient.getSelectedRow(), 0);
                    JFrameDevisGest.getjComboBox5().setSelectedItem(valueCell);
                }
                JOptionPane.showMessageDialog(this, "Modifications effectuées", "Info", JOptionPane.INFORMATION_MESSAGE);
                this.dispose();
            }else{
                if(option == JOptionPane.NO_OPTION){
                    this.dispose();
                }
            }
        }
    }//GEN-LAST:event_formWindowClosing

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton boutonAjoutClient;
    private javax.swing.JButton boutonValider;
    private javax.swing.JTextField fieldRechercher;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTextField11;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField9;
    private static javax.swing.JTable tabClient;
    // End of variables declaration//GEN-END:variables
}
